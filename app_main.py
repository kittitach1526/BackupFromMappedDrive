import os
import shutil
import filecmp
from datetime import datetime, timedelta
import schedule
import time

import configparser

import threading
import tkinter as tk


config = configparser.ConfigParser()
config.read("config.ini", encoding="utf-8")

mapped_drives_str = config.get("BackupSettings", "mapped_drives", fallback=r"Y:\\")
mapped_drives = [d.strip() for d in mapped_drives_str.split(",") if d.strip()]

destination_bases_str = config.get("BackupSettings", "destination_base", fallback=r"C:\Backup_AllMappedDrives")
destination_bases = [d.strip() for d in destination_bases_str.split(",") if d.strip()]

log_file = config.get("BackupSettings", "log_file", fallback=r"C:\Backup_AllMappedDrives\backup_log.txt")

MAX_DEPTH = config.getint("BackupSettings", "max_depth", fallback=50)
MAX_BACKUP_AGE_DAYS = config.getint("BackupSettings", "max_backup_age_days", fallback=7)

print("Mapped Drives:", mapped_drives)
print("Destination Bases:", destination_bases)
print("Log File:", log_file)
print("Max Depth:", MAX_DEPTH)
print("Max Backup Age Days:", MAX_BACKUP_AGE_DAYS)


def show_notification(title, message, duration=1800):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
    ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á duration ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (default 1800 = 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
    """

    def run():
        root = tk.Tk()
        root.title(title)
        root.geometry("400x150")
        root.attributes("-topmost", True)  # ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏•‡∏≠‡∏î
        root.resizable(False, False)

        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        label = tk.Label(root, text=message, font=("Arial", 12), wraplength=380)
        label.pack(expand=True, fill="both", padx=10, pady=10)

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        def close_window():
            root.destroy()

        # ‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á duration ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        root.after(duration * 1000, close_window)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        root.mainloop()

    # ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å main program
    threading.Thread(target=run, daemon=True).start()


def write_log(message):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå log ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    log_dir = os.path.dirname(log_file)
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_line = f"[{timestamp}] {message}\n"
    print(log_line, end="")  # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≠‡∏Å console ‡∏î‡πâ‡∏ß‡∏¢
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(log_line)

def cleanup_old_backups(base_folders, max_age_days=MAX_BACKUP_AGE_DAYS):
    now = datetime.now()
    cutoff = now - timedelta(days=max_age_days)

    for base_folder in base_folders:
        if not os.path.exists(base_folder):
            continue

        for item in os.listdir(base_folder):
            item_path = os.path.join(base_folder, item)
            try:
                if os.path.isdir(item_path):
                    mod_time = datetime.fromtimestamp(os.path.getmtime(item_path))
                    if mod_time < cutoff:
                        shutil.rmtree(item_path)
                        write_log(f"Deleted old backup: {item_path}")
            except Exception as e:
                write_log(f"[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö backup ‡πÄ‡∏Å‡πà‡∏≤ {item_path}: {e}")

def sync_folders(source, destination, depth=0):
    if depth > MAX_DEPTH:
        write_log(f"[WARN] ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å {MAX_DEPTH} ‡∏ó‡∏µ‡πà: {source}")
        return

    try:
        if not os.path.exists(destination):
            os.makedirs(destination)

        for item in os.listdir(source):
            s_path = os.path.join(source, item)
            d_path = os.path.join(destination, item)

            if os.path.islink(s_path):
                write_log(f"[SKIP] ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô symlink: {s_path}")
                continue

            if os.path.isdir(s_path):
                sync_folders(s_path, d_path, depth + 1)
            else:
                os.makedirs(os.path.dirname(d_path), exist_ok=True)

                if not os.path.exists(d_path) or not filecmp.cmp(s_path, d_path, shallow=False):
                    shutil.copy2(s_path, d_path)
                    write_log(f"Copied: {s_path} ‚Üí {d_path}")
    except Exception as e:
        write_log(f"[ERROR] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà {source}: {e}")

def backup_drive(source_dir):
    # ‡∏•‡∏ö backup ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏ó‡∏∏‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    cleanup_old_backups(destination_bases)

    drive_letter = source_dir.strip("\\").replace(":", "")
    time_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    for destination_base in destination_bases:
        destination_dir = os.path.join(destination_base, f"{drive_letter}_{time_str}")
        write_log(f"üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {source_dir} ‚Üí {destination_dir}")
        if os.path.exists(source_dir):
            sync_folders(source_dir, destination_dir)
            write_log(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á {source_dir} ‡∏ó‡∏µ‡πà {destination_dir} ‡πÄ‡∏ß‡∏•‡∏≤ {datetime.now()}")
            msg = f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á {source_dir} ‡∏ó‡∏µ‡πà {destination_dir} ‡πÄ‡∏ß‡∏•‡∏≤ {datetime.now()}"
            show_notification("Backup Completed", msg)
        else:
            write_log(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡∏£‡∏ü‡πå {source_dir} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
            msg = f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡∏£‡∏ü‡πå {source_dir} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
            show_notification("Backup Error", msg)

def backup_all():
    write_log(f"üïí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    for drive in mapped_drives:
        backup_drive(drive)
    write_log(f"üïí ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\n")

schedule.every().day.at("01:00").do(backup_all)

if __name__ == "__main__":
    write_log("üöÄ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà... (‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤)")
    backup_all()
    while True:
        schedule.run_pending()
        time.sleep(60)
